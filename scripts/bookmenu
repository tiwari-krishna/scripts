#!/usr/bin/env bash

FORMAT="" # e.g. epub, mobi
OUT="$HOME/.bookmenu" # path to save books
URL1="https://it1lib.org/s"
URL2="http://library.lol/main"
URL3="https://ipfs.io/ipfs"
TMPDIR="/dev/shm/${0##*/}" # /tmp is also viable if {tmpfs,ramfs} is on
INDEX="$TMPDIR/bookmenu_index"
LIST="$TMPDIR/bookmenu_list"
TITLE="$TMPDIR/bookmenu_title"
INFO="$TMPDIR/bookmenu_info"
COVER="$TMPDIR/bookmenu_cover"
IMAGE="$TMPDIR/bookmenu_image"
TEXT="$TMPDIR/bookmenu_text"
QUERY=$@

[[ ! -d "$TMPDIR" ]] && { mkdir -p $TMPDIR; }
[[ ! -d "$OUT" ]] && { mkdir -p $OUT; }
[[ -z "$QUERY" ]] && { echo "usage: ${0##*/} {query}"; exit 2; }

get_index() { wget -q "${URL1}/${QUERY}/?extensions[0]=$FORMAT" -O $INDEX; }
get_list() { grep "data-src" $INDEX | cut -d'"' -f8 | sed '/^\//d' > $LIST; max=$(wc -l $LIST | cut -d' ' -f1); }
get_title() { grep "text-decoration" $INDEX | cut -d'>' -f2 | tail -n +4 | sed -e "s/...$//" > $TITLE; }
get_info() { grep 'MB\|KB' $INDEX | cut -d">" -f2 | cut -d"<" -f1 > $INFO; }
termset() { [[ $1 == "reset" ]] && { tput cnorm; stty echo; trap 2; } || { tput civis; stty -echo; trap '' 2; }; }
load() { clear; wget "$1" -O "$2"; clear; }
prompt() { echo -ne "\n[${count}/${max}] ${1}[d]ownload [q]uit\n"; }

save() { hashsum=$(cut -d'/' -f9 <<< $link | cut -d '.' -f1);
        upstream=$(grep $URL3 <<< "$(curl -s $URL2/"${hashsum^^}")" | cut -d'"' -f2)
        [[ -z $upstream ]] && { fail=$count; down=0; return 1; }
        [[ -z $1 ]] && name=$hashsum || name=$1
        clear; load "$upstream" "$OUT/$name.${extension,,}"; }

main() {
        next=1; count=1; max=0; down=0; fail=0; size=0; rterm=$TERM
        rm $INDEX $LIST $TITLE $INFO $COVER $IMAGE $TEXT 2>/dev/null
        get_index; get_list; get_title; get_info
        if [[ -s $LIST ]]; then
                while :; do
                        let limit=$max+1
                        [[ $count == "$limit" ]] && break
                        width=$((($(tput cols)*10)/25))
                        #height=$(($(tput lines)-5))
                        link=$(sed -n "${count}p" $LIST)
                        data=$(sed -n "${count}p" $INFO)
                        author=$(grep 'author' $INDEX | cut -d">" -f3 | cut -d "<" -f1 | sed -r '/^\s*$/d' | sed -n "${count}p")
                        extension=$(cut -d"," -f1 <<< $data)
                        size=$(cut -d"," -f2- <<< $data)
                        echo -e "\n\n" > $TEXT
                        sed -n "${count}p" $TITLE | sed -e "s/.\{${width}\}/&\n/g" >> $TEXT
                        echo -e "\nAuthor: $author\nFormat: $extension\nSize:$size" >> $TEXT
                        load $link $COVER
                        #TERM="book" viu -w "$width" -h "$height" $COVER > $IMAGE
                        chafa $COVER > $IMAGE
                        #TERM=$rterm termset
                        paste $IMAGE $TEXT
                        [[ $max == 1 ]] && prompt || { [[ $count == 1 ]] && prompt "[n]ext ";
                        [[ $max == "$count" ]] && [[ $down != "$count" ]] && prompt "[p]revious ";
                        [[ $count != 1 ]] && [[ $max != "$count" ]] && prompt "[p]revious [n]ext "; }
                        [[ $fail == "$count" ]] && echo "ipfs download unavailable for this book"
                        [[ $down == "$count" ]] && echo "saved to: \"$OUT/$name.${extension,,}\""
                        while :; do
                                read -N 1 -s choice
                                case $choice in
                                        n)
                                        [[ $max != $count ]] && break;;
                                        p)
                                        [[ $count != 1 ]] && { next=0; let count--; break; }
                                        ;;
                                        d)
                                        termset reset
                                        read -p "filename: " filename
                                        save "$filename"
                                        termset
                                        [[ $fail == 0 ]] && down=$count; next=0; break;;
                                        q)
                                        end=1; break;;
                                        *)
                                        ;;
                                esac
                        done
                [[ $end == 1 ]] && break; [[ $next == 1 ]] && let count++
                next=1; clear; done
        fi
        termset reset
        [[ $end != 1 ]] && [[ $count == 1 ]] && { echo "no books found"; exit 1; }
}
main
